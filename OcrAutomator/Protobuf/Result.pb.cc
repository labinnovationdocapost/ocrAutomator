// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Result.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Result.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Docapost {
namespace IA {
namespace Tesseract {
namespace Proto {

namespace {

const ::google::protobuf::Descriptor* Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Result_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Result_2eproto() {
  protobuf_AddDesc_Result_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Result.proto");
  GOOGLE_CHECK(file != NULL);
  Result_descriptor_ = file->message_type(0);
  static const int Result_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, threadid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, ellapsed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, result_),
  };
  Result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Result_descriptor_,
      Result::default_instance_,
      Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Result));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Result_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Result_descriptor_, &Result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Result_2eproto() {
  delete Result::default_instance_;
  delete Result_reflection_;
}

void protobuf_AddDesc_Result_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Result.proto\022\033Docapost.IA.Tesseract.Pr"
    "oto\"f\n\006Result\022\014\n\004uuid\030\001 \002(\t\022\020\n\010threadId\030"
    "\002 \002(\005\022\r\n\005Start\030\003 \002(\003\022\013\n\003End\030\004 \002(\003\022\020\n\010Ell"
    "apsed\030\005 \002(\003\022\016\n\006Result\030\006 \003(\t", 147);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Result.proto", &protobuf_RegisterTypes);
  Result::default_instance_ = new Result();
  Result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Result_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Result_2eproto {
  StaticDescriptorInitializer_Result_2eproto() {
    protobuf_AddDesc_Result_2eproto();
  }
} static_descriptor_initializer_Result_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Result::kUuidFieldNumber;
const int Result::kThreadIdFieldNumber;
const int Result::kStartFieldNumber;
const int Result::kEndFieldNumber;
const int Result::kEllapsedFieldNumber;
const int Result::kResultFieldNumber;
#endif  // !_MSC_VER

Result::Result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Docapost.IA.Tesseract.Proto.Result)
}

void Result::InitAsDefaultInstance() {
}

Result::Result(const Result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Docapost.IA.Tesseract.Proto.Result)
}

void Result::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  threadid_ = 0;
  start_ = GOOGLE_LONGLONG(0);
  end_ = GOOGLE_LONGLONG(0);
  ellapsed_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:Docapost.IA.Tesseract.Proto.Result)
  SharedDtor();
}

void Result::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (this != default_instance_) {
  }
}

void Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Result_descriptor_;
}

const Result& Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Result_2eproto();
  return *default_instance_;
}

Result* Result::default_instance_ = NULL;

Result* Result::New() const {
  return new Result;
}

void Result::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Result*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(start_, ellapsed_);
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uuid_->clear();
      }
    }
    threadid_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Docapost.IA.Tesseract.Proto.Result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uuid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_threadId;
        break;
      }

      // required int32 threadId = 2;
      case 2: {
        if (tag == 16) {
         parse_threadId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &threadid_)));
          set_has_threadid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Start;
        break;
      }

      // required int64 Start = 3;
      case 3: {
        if (tag == 24) {
         parse_Start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_End;
        break;
      }

      // required int64 End = 4;
      case 4: {
        if (tag == 32) {
         parse_End:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Ellapsed;
        break;
      }

      // required int64 Ellapsed = 5;
      case 5: {
        if (tag == 40) {
         parse_Ellapsed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ellapsed_)));
          set_has_ellapsed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Result;
        break;
      }

      // repeated string Result = 6;
      case 6: {
        if (tag == 50) {
         parse_Result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_result()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->result(this->result_size() - 1).data(),
            this->result(this->result_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "result");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Result;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Docapost.IA.Tesseract.Proto.Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Docapost.IA.Tesseract.Proto.Result)
  return false;
#undef DO_
}

void Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Docapost.IA.Tesseract.Proto.Result)
  // required string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  // required int32 threadId = 2;
  if (has_threadid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->threadid(), output);
  }

  // required int64 Start = 3;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->start(), output);
  }

  // required int64 End = 4;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->end(), output);
  }

  // required int64 Ellapsed = 5;
  if (has_ellapsed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->ellapsed(), output);
  }

  // repeated string Result = 6;
  for (int i = 0; i < this->result_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->result(i).data(), this->result(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "result");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->result(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Docapost.IA.Tesseract.Proto.Result)
}

::google::protobuf::uint8* Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Docapost.IA.Tesseract.Proto.Result)
  // required string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  // required int32 threadId = 2;
  if (has_threadid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->threadid(), target);
  }

  // required int64 Start = 3;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->start(), target);
  }

  // required int64 End = 4;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->end(), target);
  }

  // required int64 Ellapsed = 5;
  if (has_ellapsed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->ellapsed(), target);
  }

  // repeated string Result = 6;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->result(i).data(), this->result(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "result");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->result(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Docapost.IA.Tesseract.Proto.Result)
  return target;
}

int Result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // required int32 threadId = 2;
    if (has_threadid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->threadid());
    }

    // required int64 Start = 3;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start());
    }

    // required int64 End = 4;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end());
    }

    // required int64 Ellapsed = 5;
    if (has_ellapsed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ellapsed());
    }

  }
  // repeated string Result = 6;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->result(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Result::MergeFrom(const Result& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_threadid()) {
      set_threadid(from.threadid());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
    if (from.has_ellapsed()) {
      set_ellapsed(from.ellapsed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Result::CopyFrom(const Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Result::Swap(Result* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(threadid_, other->threadid_);
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(ellapsed_, other->ellapsed_);
    result_.Swap(&other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Result_descriptor_;
  metadata.reflection = Result_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Tesseract
}  // namespace IA
}  // namespace Docapost

// @@protoc_insertion_point(global_scope)
