// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Result.proto

#ifndef PROTOBUF_Result_2eproto__INCLUDED
#define PROTOBUF_Result_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Docapost {
namespace IA {
namespace Tesseract {
namespace Proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Result_2eproto();
void protobuf_AssignDesc_Result_2eproto();
void protobuf_ShutdownFile_Result_2eproto();

class Result;

// ===================================================================

class Result : public ::google::protobuf::Message {
 public:
  Result();
  virtual ~Result();

  Result(const Result& from);

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Result& default_instance();

  void Swap(Result* other);

  // implements Message ----------------------------------------------

  Result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uuid = 1;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 1;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // required int32 threadId = 2;
  inline bool has_threadid() const;
  inline void clear_threadid();
  static const int kThreadIdFieldNumber = 2;
  inline ::google::protobuf::int32 threadid() const;
  inline void set_threadid(::google::protobuf::int32 value);

  // required int64 Start = 3;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 3;
  inline ::google::protobuf::int64 start() const;
  inline void set_start(::google::protobuf::int64 value);

  // required int64 End = 4;
  inline bool has_end() const;
  inline void clear_end();
  static const int kEndFieldNumber = 4;
  inline ::google::protobuf::int64 end() const;
  inline void set_end(::google::protobuf::int64 value);

  // required int64 Ellapsed = 5;
  inline bool has_ellapsed() const;
  inline void clear_ellapsed();
  static const int kEllapsedFieldNumber = 5;
  inline ::google::protobuf::int64 ellapsed() const;
  inline void set_ellapsed(::google::protobuf::int64 value);

  // required string Result = 6;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 6;
  inline const ::std::string& result() const;
  inline void set_result(const ::std::string& value);
  inline void set_result(const char* value);
  inline void set_result(const char* value, size_t size);
  inline ::std::string* mutable_result();
  inline ::std::string* release_result();
  inline void set_allocated_result(::std::string* result);

  // @@protoc_insertion_point(class_scope:Docapost.IA.Tesseract.Proto.Result)
 private:
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_threadid();
  inline void clear_has_threadid();
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_end();
  inline void clear_has_end();
  inline void set_has_ellapsed();
  inline void clear_has_ellapsed();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uuid_;
  ::google::protobuf::int64 start_;
  ::google::protobuf::int64 end_;
  ::google::protobuf::int64 ellapsed_;
  ::std::string* result_;
  ::google::protobuf::int32 threadid_;
  friend void  protobuf_AddDesc_Result_2eproto();
  friend void protobuf_AssignDesc_Result_2eproto();
  friend void protobuf_ShutdownFile_Result_2eproto();

  void InitAsDefaultInstance();
  static Result* default_instance_;
};
// ===================================================================


// ===================================================================

// Result

// required string uuid = 1;
inline bool Result::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Result::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Result::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Result::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& Result::uuid() const {
  // @@protoc_insertion_point(field_get:Docapost.IA.Tesseract.Proto.Result.uuid)
  return *uuid_;
}
inline void Result::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set:Docapost.IA.Tesseract.Proto.Result.uuid)
}
inline void Result::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Docapost.IA.Tesseract.Proto.Result.uuid)
}
inline void Result::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Docapost.IA.Tesseract.Proto.Result.uuid)
}
inline ::std::string* Result::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Docapost.IA.Tesseract.Proto.Result.uuid)
  return uuid_;
}
inline ::std::string* Result::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Result::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Docapost.IA.Tesseract.Proto.Result.uuid)
}

// required int32 threadId = 2;
inline bool Result::has_threadid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Result::set_has_threadid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Result::clear_has_threadid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Result::clear_threadid() {
  threadid_ = 0;
  clear_has_threadid();
}
inline ::google::protobuf::int32 Result::threadid() const {
  // @@protoc_insertion_point(field_get:Docapost.IA.Tesseract.Proto.Result.threadId)
  return threadid_;
}
inline void Result::set_threadid(::google::protobuf::int32 value) {
  set_has_threadid();
  threadid_ = value;
  // @@protoc_insertion_point(field_set:Docapost.IA.Tesseract.Proto.Result.threadId)
}

// required int64 Start = 3;
inline bool Result::has_start() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Result::set_has_start() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Result::clear_has_start() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Result::clear_start() {
  start_ = GOOGLE_LONGLONG(0);
  clear_has_start();
}
inline ::google::protobuf::int64 Result::start() const {
  // @@protoc_insertion_point(field_get:Docapost.IA.Tesseract.Proto.Result.Start)
  return start_;
}
inline void Result::set_start(::google::protobuf::int64 value) {
  set_has_start();
  start_ = value;
  // @@protoc_insertion_point(field_set:Docapost.IA.Tesseract.Proto.Result.Start)
}

// required int64 End = 4;
inline bool Result::has_end() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Result::set_has_end() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Result::clear_has_end() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Result::clear_end() {
  end_ = GOOGLE_LONGLONG(0);
  clear_has_end();
}
inline ::google::protobuf::int64 Result::end() const {
  // @@protoc_insertion_point(field_get:Docapost.IA.Tesseract.Proto.Result.End)
  return end_;
}
inline void Result::set_end(::google::protobuf::int64 value) {
  set_has_end();
  end_ = value;
  // @@protoc_insertion_point(field_set:Docapost.IA.Tesseract.Proto.Result.End)
}

// required int64 Ellapsed = 5;
inline bool Result::has_ellapsed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Result::set_has_ellapsed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Result::clear_has_ellapsed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Result::clear_ellapsed() {
  ellapsed_ = GOOGLE_LONGLONG(0);
  clear_has_ellapsed();
}
inline ::google::protobuf::int64 Result::ellapsed() const {
  // @@protoc_insertion_point(field_get:Docapost.IA.Tesseract.Proto.Result.Ellapsed)
  return ellapsed_;
}
inline void Result::set_ellapsed(::google::protobuf::int64 value) {
  set_has_ellapsed();
  ellapsed_ = value;
  // @@protoc_insertion_point(field_set:Docapost.IA.Tesseract.Proto.Result.Ellapsed)
}

// required string Result = 6;
inline bool Result::has_result() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Result::set_has_result() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Result::clear_has_result() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Result::clear_result() {
  if (result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_->clear();
  }
  clear_has_result();
}
inline const ::std::string& Result::result() const {
  // @@protoc_insertion_point(field_get:Docapost.IA.Tesseract.Proto.Result.Result)
  return *result_;
}
inline void Result::set_result(const ::std::string& value) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_ = new ::std::string;
  }
  result_->assign(value);
  // @@protoc_insertion_point(field_set:Docapost.IA.Tesseract.Proto.Result.Result)
}
inline void Result::set_result(const char* value) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_ = new ::std::string;
  }
  result_->assign(value);
  // @@protoc_insertion_point(field_set_char:Docapost.IA.Tesseract.Proto.Result.Result)
}
inline void Result::set_result(const char* value, size_t size) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_ = new ::std::string;
  }
  result_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Docapost.IA.Tesseract.Proto.Result.Result)
}
inline ::std::string* Result::mutable_result() {
  set_has_result();
  if (result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Docapost.IA.Tesseract.Proto.Result.Result)
  return result_;
}
inline ::std::string* Result::release_result() {
  clear_has_result();
  if (result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = result_;
    result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Result::set_allocated_result(::std::string* result) {
  if (result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_;
  }
  if (result) {
    set_has_result();
    result_ = result;
  } else {
    clear_has_result();
    result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Docapost.IA.Tesseract.Proto.Result.Result)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Tesseract
}  // namespace IA
}  // namespace Docapost

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Result_2eproto__INCLUDED
