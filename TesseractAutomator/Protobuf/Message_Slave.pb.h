// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message_Slave.proto

#ifndef PROTOBUF_Message_5fSlave_2eproto__INCLUDED
#define PROTOBUF_Message_5fSlave_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Synchro_Slave.pb.h"
#include "Declare.pb.h"
// @@protoc_insertion_point(includes)

namespace Docapost {
namespace IA {
namespace Tesseract {
namespace Proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Message_5fSlave_2eproto();
void protobuf_AssignDesc_Message_5fSlave_2eproto();
void protobuf_ShutdownFile_Message_5fSlave_2eproto();

class Message_Slave;

// ===================================================================

class Message_Slave : public ::google::protobuf::Message {
 public:
  Message_Slave();
  virtual ~Message_Slave();

  Message_Slave(const Message_Slave& from);

  inline Message_Slave& operator=(const Message_Slave& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message_Slave& default_instance();

  enum MessageCase {
    kSynchro = 1,
    kDeclare = 2,
    MESSAGE_NOT_SET = 0,
  };

  void Swap(Message_Slave* other);

  // implements Message ----------------------------------------------

  Message_Slave* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message_Slave& from);
  void MergeFrom(const Message_Slave& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Docapost.IA.Tesseract.Proto.Synchro_Slave synchro = 1;
  inline bool has_synchro() const;
  inline void clear_synchro();
  static const int kSynchroFieldNumber = 1;
  inline const ::Docapost::IA::Tesseract::Proto::Synchro_Slave& synchro() const;
  inline ::Docapost::IA::Tesseract::Proto::Synchro_Slave* mutable_synchro();
  inline ::Docapost::IA::Tesseract::Proto::Synchro_Slave* release_synchro();
  inline void set_allocated_synchro(::Docapost::IA::Tesseract::Proto::Synchro_Slave* synchro);

  // optional .Docapost.IA.Tesseract.Proto.Declare declare = 2;
  inline bool has_declare() const;
  inline void clear_declare();
  static const int kDeclareFieldNumber = 2;
  inline const ::Docapost::IA::Tesseract::Proto::Declare& declare() const;
  inline ::Docapost::IA::Tesseract::Proto::Declare* mutable_declare();
  inline ::Docapost::IA::Tesseract::Proto::Declare* release_declare();
  inline void set_allocated_declare(::Docapost::IA::Tesseract::Proto::Declare* declare);

  inline MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:Docapost.IA.Tesseract.Proto.Message_Slave)
 private:
  inline void set_has_synchro();
  inline void set_has_declare();

  inline bool has_message();
  void clear_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  union MessageUnion {
    ::Docapost::IA::Tesseract::Proto::Synchro_Slave* synchro_;
    ::Docapost::IA::Tesseract::Proto::Declare* declare_;
  } message_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_Message_5fSlave_2eproto();
  friend void protobuf_AssignDesc_Message_5fSlave_2eproto();
  friend void protobuf_ShutdownFile_Message_5fSlave_2eproto();

  void InitAsDefaultInstance();
  static Message_Slave* default_instance_;
};
// ===================================================================


// ===================================================================

// Message_Slave

// optional .Docapost.IA.Tesseract.Proto.Synchro_Slave synchro = 1;
inline bool Message_Slave::has_synchro() const {
  return message_case() == kSynchro;
}
inline void Message_Slave::set_has_synchro() {
  _oneof_case_[0] = kSynchro;
}
inline void Message_Slave::clear_synchro() {
  if (has_synchro()) {
    delete message_.synchro_;
    clear_has_message();
  }
}
inline const ::Docapost::IA::Tesseract::Proto::Synchro_Slave& Message_Slave::synchro() const {
  return has_synchro() ? *message_.synchro_
                      : ::Docapost::IA::Tesseract::Proto::Synchro_Slave::default_instance();
}
inline ::Docapost::IA::Tesseract::Proto::Synchro_Slave* Message_Slave::mutable_synchro() {
  if (!has_synchro()) {
    clear_message();
    set_has_synchro();
    message_.synchro_ = new ::Docapost::IA::Tesseract::Proto::Synchro_Slave;
  }
  return message_.synchro_;
}
inline ::Docapost::IA::Tesseract::Proto::Synchro_Slave* Message_Slave::release_synchro() {
  if (has_synchro()) {
    clear_has_message();
    ::Docapost::IA::Tesseract::Proto::Synchro_Slave* temp = message_.synchro_;
    message_.synchro_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Message_Slave::set_allocated_synchro(::Docapost::IA::Tesseract::Proto::Synchro_Slave* synchro) {
  clear_message();
  if (synchro) {
    set_has_synchro();
    message_.synchro_ = synchro;
  }
}

// optional .Docapost.IA.Tesseract.Proto.Declare declare = 2;
inline bool Message_Slave::has_declare() const {
  return message_case() == kDeclare;
}
inline void Message_Slave::set_has_declare() {
  _oneof_case_[0] = kDeclare;
}
inline void Message_Slave::clear_declare() {
  if (has_declare()) {
    delete message_.declare_;
    clear_has_message();
  }
}
inline const ::Docapost::IA::Tesseract::Proto::Declare& Message_Slave::declare() const {
  return has_declare() ? *message_.declare_
                      : ::Docapost::IA::Tesseract::Proto::Declare::default_instance();
}
inline ::Docapost::IA::Tesseract::Proto::Declare* Message_Slave::mutable_declare() {
  if (!has_declare()) {
    clear_message();
    set_has_declare();
    message_.declare_ = new ::Docapost::IA::Tesseract::Proto::Declare;
  }
  return message_.declare_;
}
inline ::Docapost::IA::Tesseract::Proto::Declare* Message_Slave::release_declare() {
  if (has_declare()) {
    clear_has_message();
    ::Docapost::IA::Tesseract::Proto::Declare* temp = message_.declare_;
    message_.declare_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Message_Slave::set_allocated_declare(::Docapost::IA::Tesseract::Proto::Declare* declare) {
  clear_message();
  if (declare) {
    set_has_declare();
    message_.declare_ = declare;
  }
}

inline bool Message_Slave::has_message() {
  return message_case() != MESSAGE_NOT_SET;
}
inline void Message_Slave::clear_has_message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
inline Message_Slave::MessageCase Message_Slave::message_case() const {
  return Message_Slave::MessageCase(_oneof_case_[0]);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Tesseract
}  // namespace IA
}  // namespace Docapost

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Message_5fSlave_2eproto__INCLUDED
