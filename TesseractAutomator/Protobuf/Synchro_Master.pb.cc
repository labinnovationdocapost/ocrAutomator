// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Synchro_Master.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Synchro_Master.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Docapost {
namespace IA {
namespace Tesseract {
namespace Proto {

namespace {

const ::google::protobuf::Descriptor* Synchro_Master_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Synchro_Master_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Synchro_5fMaster_2eproto() {
  protobuf_AddDesc_Synchro_5fMaster_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Synchro_Master.proto");
  GOOGLE_CHECK(file != NULL);
  Synchro_Master_descriptor_ = file->message_type(0);
  static const int Synchro_Master_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Synchro_Master, totalthread_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Synchro_Master, done_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Synchro_Master, skip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Synchro_Master, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Synchro_Master, isend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Synchro_Master, pending_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Synchro_Master, data_),
  };
  Synchro_Master_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Synchro_Master_descriptor_,
      Synchro_Master::default_instance_,
      Synchro_Master_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Synchro_Master, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Synchro_Master, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Synchro_Master));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Synchro_5fMaster_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Synchro_Master_descriptor_, &Synchro_Master::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Synchro_5fMaster_2eproto() {
  delete Synchro_Master::default_instance_;
  delete Synchro_Master_reflection_;
}

void protobuf_AddDesc_Synchro_5fMaster_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Docapost::IA::Tesseract::Proto::protobuf_AddDesc_File_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024Synchro_Master.proto\022\033Docapost.IA.Tess"
    "eract.Proto\032\nFile.proto\"\241\001\n\016Synchro_Mast"
    "er\022\023\n\013TotalThread\030\001 \002(\005\022\014\n\004done\030\002 \002(\005\022\014\n"
    "\004skip\030\003 \002(\005\022\r\n\005total\030\004 \002(\005\022\r\n\005isEnd\030\005 \002("
    "\010\022\017\n\007Pending\030\006 \002(\005\022/\n\004Data\030\007 \003(\0132!.Docap"
    "ost.IA.Tesseract.Proto.File", 227);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Synchro_Master.proto", &protobuf_RegisterTypes);
  Synchro_Master::default_instance_ = new Synchro_Master();
  Synchro_Master::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Synchro_5fMaster_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Synchro_5fMaster_2eproto {
  StaticDescriptorInitializer_Synchro_5fMaster_2eproto() {
    protobuf_AddDesc_Synchro_5fMaster_2eproto();
  }
} static_descriptor_initializer_Synchro_5fMaster_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Synchro_Master::kTotalThreadFieldNumber;
const int Synchro_Master::kDoneFieldNumber;
const int Synchro_Master::kSkipFieldNumber;
const int Synchro_Master::kTotalFieldNumber;
const int Synchro_Master::kIsEndFieldNumber;
const int Synchro_Master::kPendingFieldNumber;
const int Synchro_Master::kDataFieldNumber;
#endif  // !_MSC_VER

Synchro_Master::Synchro_Master()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Docapost.IA.Tesseract.Proto.Synchro_Master)
}

void Synchro_Master::InitAsDefaultInstance() {
}

Synchro_Master::Synchro_Master(const Synchro_Master& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Docapost.IA.Tesseract.Proto.Synchro_Master)
}

void Synchro_Master::SharedCtor() {
  _cached_size_ = 0;
  totalthread_ = 0;
  done_ = 0;
  skip_ = 0;
  total_ = 0;
  isend_ = false;
  pending_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Synchro_Master::~Synchro_Master() {
  // @@protoc_insertion_point(destructor:Docapost.IA.Tesseract.Proto.Synchro_Master)
  SharedDtor();
}

void Synchro_Master::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Synchro_Master::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Synchro_Master::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Synchro_Master_descriptor_;
}

const Synchro_Master& Synchro_Master::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Synchro_5fMaster_2eproto();
  return *default_instance_;
}

Synchro_Master* Synchro_Master::default_instance_ = NULL;

Synchro_Master* Synchro_Master::New() const {
  return new Synchro_Master;
}

void Synchro_Master::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Synchro_Master*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(totalthread_, pending_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Synchro_Master::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Docapost.IA.Tesseract.Proto.Synchro_Master)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 TotalThread = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalthread_)));
          set_has_totalthread();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_done;
        break;
      }

      // required int32 done = 2;
      case 2: {
        if (tag == 16) {
         parse_done:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &done_)));
          set_has_done();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_skip;
        break;
      }

      // required int32 skip = 3;
      case 3: {
        if (tag == 24) {
         parse_skip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skip_)));
          set_has_skip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_total;
        break;
      }

      // required int32 total = 4;
      case 4: {
        if (tag == 32) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_isEnd;
        break;
      }

      // required bool isEnd = 5;
      case 5: {
        if (tag == 40) {
         parse_isEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isend_)));
          set_has_isend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Pending;
        break;
      }

      // required int32 Pending = 6;
      case 6: {
        if (tag == 48) {
         parse_Pending:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pending_)));
          set_has_pending();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_Data;
        break;
      }

      // repeated .Docapost.IA.Tesseract.Proto.File Data = 7;
      case 7: {
        if (tag == 58) {
         parse_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_Data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Docapost.IA.Tesseract.Proto.Synchro_Master)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Docapost.IA.Tesseract.Proto.Synchro_Master)
  return false;
#undef DO_
}

void Synchro_Master::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Docapost.IA.Tesseract.Proto.Synchro_Master)
  // required int32 TotalThread = 1;
  if (has_totalthread()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->totalthread(), output);
  }

  // required int32 done = 2;
  if (has_done()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->done(), output);
  }

  // required int32 skip = 3;
  if (has_skip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skip(), output);
  }

  // required int32 total = 4;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->total(), output);
  }

  // required bool isEnd = 5;
  if (has_isend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isend(), output);
  }

  // required int32 Pending = 6;
  if (has_pending()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->pending(), output);
  }

  // repeated .Docapost.IA.Tesseract.Proto.File Data = 7;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Docapost.IA.Tesseract.Proto.Synchro_Master)
}

::google::protobuf::uint8* Synchro_Master::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Docapost.IA.Tesseract.Proto.Synchro_Master)
  // required int32 TotalThread = 1;
  if (has_totalthread()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->totalthread(), target);
  }

  // required int32 done = 2;
  if (has_done()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->done(), target);
  }

  // required int32 skip = 3;
  if (has_skip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skip(), target);
  }

  // required int32 total = 4;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->total(), target);
  }

  // required bool isEnd = 5;
  if (has_isend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isend(), target);
  }

  // required int32 Pending = 6;
  if (has_pending()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->pending(), target);
  }

  // repeated .Docapost.IA.Tesseract.Proto.File Data = 7;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Docapost.IA.Tesseract.Proto.Synchro_Master)
  return target;
}

int Synchro_Master::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 TotalThread = 1;
    if (has_totalthread()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalthread());
    }

    // required int32 done = 2;
    if (has_done()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->done());
    }

    // required int32 skip = 3;
    if (has_skip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skip());
    }

    // required int32 total = 4;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total());
    }

    // required bool isEnd = 5;
    if (has_isend()) {
      total_size += 1 + 1;
    }

    // required int32 Pending = 6;
    if (has_pending()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pending());
    }

  }
  // repeated .Docapost.IA.Tesseract.Proto.File Data = 7;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Synchro_Master::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Synchro_Master* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Synchro_Master*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Synchro_Master::MergeFrom(const Synchro_Master& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_totalthread()) {
      set_totalthread(from.totalthread());
    }
    if (from.has_done()) {
      set_done(from.done());
    }
    if (from.has_skip()) {
      set_skip(from.skip());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
    if (from.has_isend()) {
      set_isend(from.isend());
    }
    if (from.has_pending()) {
      set_pending(from.pending());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Synchro_Master::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Synchro_Master::CopyFrom(const Synchro_Master& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Synchro_Master::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void Synchro_Master::Swap(Synchro_Master* other) {
  if (other != this) {
    std::swap(totalthread_, other->totalthread_);
    std::swap(done_, other->done_);
    std::swap(skip_, other->skip_);
    std::swap(total_, other->total_);
    std::swap(isend_, other->isend_);
    std::swap(pending_, other->pending_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Synchro_Master::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Synchro_Master_descriptor_;
  metadata.reflection = Synchro_Master_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Tesseract
}  // namespace IA
}  // namespace Docapost

// @@protoc_insertion_point(global_scope)
